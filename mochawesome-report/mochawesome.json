{
  "stats": {
    "suites": 6,
    "tests": 40,
    "passes": 32,
    "pending": 0,
    "failures": 8,
    "start": "2024-11-24T16:46:21.985Z",
    "end": "2024-11-24T16:46:22.013Z",
    "duration": 28,
    "testsRegistered": 40,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cab67b51-11ec-40e1-a772-5a4d7a6d349c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3437ac00-6b83-4c6f-bb2a-ed558b80b689",
          "title": "test",
          "fullFile": "C:\\Github\\testing-project\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return true;",
              "err": {},
              "uuid": "ecedee8b-c008-4dae-80a2-4c4fe74f93fe",
              "parentUUID": "3437ac00-6b83-4c6f-bb2a-ed558b80b689",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecedee8b-c008-4dae-80a2-4c4fe74f93fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
          "title": "capitalize",
          "fullFile": "C:\\Github\\testing-project\\test\\capitalize.test.js",
          "file": "\\test\\capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should capitalize when input is FRED",
              "fullTitle": "capitalize should capitalize when input is FRED",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 'FRED';\nconst result = capitalize(input);\nexpect(result).to.deep.equal('Fred');",
              "err": {},
              "uuid": "d8ea17fe-f315-4655-a341-eff6b42316a1",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should capitalize when input is fred",
              "fullTitle": "capitalize should capitalize when input is fred",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 'fred';\nconst result = capitalize(input);\nexpect(result).to.deep.equal('Fred');",
              "err": {},
              "uuid": "1615998f-6da7-4820-9006-6f19196b3544",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should capitalize when input is Fred",
              "fullTitle": "capitalize should capitalize when input is Fred",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 'Fred';\nconst result = capitalize(input);\nexpect(result).to.deep.equal('Fred');",
              "err": {},
              "uuid": "f04191e0-25c4-4547-af8a-1bc019e61075",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should capitalize when input is fRED",
              "fullTitle": "capitalize should capitalize when input is fRED",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 'fRED';\nconst result = capitalize(input);\nexpect(result).to.deep.equal('Fred');",
              "err": {},
              "uuid": "cd9a5cc4-0053-4c94-95e4-8a2f75ca2c6e",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty when input is empty",
              "fullTitle": "capitalize should return empty when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = '';\nconst result = capitalize(input);\nexpect(result).to.deep.equal('');",
              "err": {},
              "uuid": "af332a5f-fbb8-4463-b2c5-8a98885c88e4",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty when input is null",
              "fullTitle": "capitalize should return empty when input is null",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = null;\nconst result = capitalize(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'Null' to deeply equal ''",
                "estack": "AssertionError: expected 'Null' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/capitalize.test.js:40:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- Null\n"
              },
              "uuid": "fb188971-bf5c-4a49-9c93-35f1bea8be8d",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty when input is undefined",
              "fullTitle": "capitalize should return empty when input is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = undefined;\nconst result = capitalize(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'Undefined' to deeply equal ''",
                "estack": "AssertionError: expected 'Undefined' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/capitalize.test.js:46:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- Undefined\n"
              },
              "uuid": "bdc29c9e-76b4-4ba4-b1cd-7a1784b19d9a",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return '0123' when input is '0123'",
              "fullTitle": "capitalize should return '0123' when input is '0123'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = '0123';\nconst result = capitalize(input);\nexpect(result).to.deep.equal('0123');",
              "err": {},
              "uuid": "ed0468c9-c70a-4ed5-9798-363f78842f37",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return '123' when input is 123",
              "fullTitle": "capitalize should return '123' when input is 123",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 123;\nconst result = capitalize(input);\nexpect(result).to.deep.equal('123');",
              "err": {},
              "uuid": "e24a932d-c512-48cd-b762-7e9c17faf694",
              "parentUUID": "40d35219-f424-4a1f-9ea7-7143e3e053b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8ea17fe-f315-4655-a341-eff6b42316a1",
            "1615998f-6da7-4820-9006-6f19196b3544",
            "f04191e0-25c4-4547-af8a-1bc019e61075",
            "cd9a5cc4-0053-4c94-95e4-8a2f75ca2c6e",
            "af332a5f-fbb8-4463-b2c5-8a98885c88e4",
            "ed0468c9-c70a-4ed5-9798-363f78842f37",
            "e24a932d-c512-48cd-b762-7e9c17faf694"
          ],
          "failures": [
            "fb188971-bf5c-4a49-9c93-35f1bea8be8d",
            "bdc29c9e-76b4-4ba4-b1cd-7a1784b19d9a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
          "title": "eq",
          "fullFile": "C:\\Github\\testing-project\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when comparing object to itself",
              "fullTitle": "eq should be true when comparing object to itself",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst result = eq(object, object);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "3a160fa5-be9d-49f5-8ef7-9cb15f6b7363",
              "parentUUID": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when comparing object to other",
              "fullTitle": "eq should be false when comparing object to other",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = { 'a': 1 };\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "ae5a2006-d969-4bb8-ae2a-8dfcb1afa84a",
              "parentUUID": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when comparing the same value",
              "fullTitle": "eq should be true when comparing the same value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = eq('a', 'a');\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "c9a55055-00e0-4cc0-b76c-70c503d2ec09",
              "parentUUID": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object and other are not same type",
              "fullTitle": "eq should be false when object and other are not same type",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const object = 'a';\nconst other = Object('a');\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {
                "message": "AssertionError: expected true to deeply equal false",
                "estack": "AssertionError: expected true to deeply equal false\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/eq.test.js:29:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "8e0bac0d-f8a7-4f92-af96-e103761a1aa0",
              "parentUUID": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object is something but other is NaN",
              "fullTitle": "eq should be false when object is something but other is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "26da4f93-99e7-467d-a4ac-c4231f0d97f9",
              "parentUUID": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when object and other are NaN",
              "fullTitle": "eq should be true when object and other are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = NaN;\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "5a245465-a10e-411d-81f4-2b0c1047d5b9",
              "parentUUID": "9cb3094b-34f2-4d93-8dbf-e968adf74d08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a160fa5-be9d-49f5-8ef7-9cb15f6b7363",
            "ae5a2006-d969-4bb8-ae2a-8dfcb1afa84a",
            "c9a55055-00e0-4cc0-b76c-70c503d2ec09",
            "26da4f93-99e7-467d-a4ac-c4231f0d97f9",
            "5a245465-a10e-411d-81f4-2b0c1047d5b9"
          ],
          "failures": [
            "8e0bac0d-f8a7-4f92-af96-e103761a1aa0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
          "title": "filter",
          "fullFile": "C:\\Github\\testing-project\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter nothing if predicate is true for all",
              "fullTitle": "filter should filter nothing if predicate is true for all",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >0;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "52899c90-768a-4c06-a1d3-aa01ee61ab52",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers greater than 5",
              "fullTitle": "filter should filter numbers greater than 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >5;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([7, 6]);",
              "err": {},
              "uuid": "3ad3aa61-6145-4460-8cd9-2c813b3fe597",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no numbers fulfill the predicate",
              "fullTitle": "filter should return an empty array if no numbers fulfill the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >10;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:25:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "fc665669-fd11-4c10-9d87-637246b934ee",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is empty",
              "fullTitle": "filter should return an empty array when the array is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst predicate = true;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:32:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "47608b5d-48c3-49dc-953b-67f3fe4213ae",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is null or not defined",
              "fullTitle": "filter should return an empty array when the array is null or not defined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const predicate = (value) => value >10;\nconst result_null = filter(null, predicate);\nexpect(result_null).to.deep.equal([]);\nconst result_not_defined = filter(undefined, predicate);\nexpect(result_not_defined).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:38:37)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "5324241b-5327-4815-955a-35839fb2e0d7",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array as arguments to the predicate",
              "fullTitle": "filter should pass index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value, index, array) => value === array[index];\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "091ad86f-ecb9-4494-9b28-440bc821f9cf",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter objects based on a property value",
              "fullTitle": "filter should filter objects based on a property value",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: 'barney', active: true },\n    { user: 'fred',   active: false }\n];\nconst predicate = (user) => user.active;\nconst result = filter(users, predicate);\nexpect(result).to.deep.equal([{ user: 'barney', active: true }]);",
              "err": {},
              "uuid": "862a73fa-c3e0-44a9-940e-b608689b5a16",
              "parentUUID": "a6a75e7f-87e6-428b-9159-74b61fb30d2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52899c90-768a-4c06-a1d3-aa01ee61ab52",
            "3ad3aa61-6145-4460-8cd9-2c813b3fe597",
            "091ad86f-ecb9-4494-9b28-440bc821f9cf",
            "862a73fa-c3e0-44a9-940e-b608689b5a16"
          ],
          "failures": [
            "fc665669-fd11-4c10-9d87-637246b934ee",
            "47608b5d-48c3-49dc-953b-67f3fe4213ae",
            "5324241b-5327-4815-955a-35839fb2e0d7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
          "title": "isLength",
          "fullFile": "C:\\Github\\testing-project\\test\\isLength.test.js",
          "file": "\\test\\isLength.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when number is 0",
              "fullTitle": "isLength should be true when number is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 0;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "f1773881-5c68-433e-bf0a-57992146358c",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when value is 1",
              "fullTitle": "isLength should be true when value is 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "94439805-6f58-44e7-bdc1-e563330aa060",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when when value is 3",
              "fullTitle": "isLength should be true when when value is 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 3;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "ba1fd829-0c76-44c7-9686-e51537444b32",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is -1",
              "fullTitle": "isLength should be false when when value is -1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = -1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "2744c487-5a0d-4f6b-94db-a2c6356544d5",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is 4.52",
              "fullTitle": "isLength should be false when when value is 4.52",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 4.52;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "bec94d6e-63bd-440c-aa18-e165e8f8f5ab",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is not a number",
              "fullTitle": "isLength should be false when value is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "86c87be5-6e7a-4f60-b59a-9f29a5059b19",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is infinity",
              "fullTitle": "isLength should be false when value is infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Infinity;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "5738c699-2eb4-461e-b3d6-565c8b5f9d57",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is number as a string",
              "fullTitle": "isLength should be false when value is number as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "ac240e10-81ee-4a6a-b8fd-b7d70a71f1fe",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when number is NaN",
              "fullTitle": "isLength should be false when number is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = NaN;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "a32e896b-0bd5-44b1-86fa-94cc139654bc",
              "parentUUID": "1a3aaf42-7783-4d9e-8eb4-4bd8f9b46ed5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1773881-5c68-433e-bf0a-57992146358c",
            "94439805-6f58-44e7-bdc1-e563330aa060",
            "ba1fd829-0c76-44c7-9686-e51537444b32",
            "2744c487-5a0d-4f6b-94db-a2c6356544d5",
            "bec94d6e-63bd-440c-aa18-e165e8f8f5ab",
            "86c87be5-6e7a-4f60-b59a-9f29a5059b19",
            "5738c699-2eb4-461e-b3d6-565c8b5f9d57",
            "ac240e10-81ee-4a6a-b8fd-b7d70a71f1fe",
            "a32e896b-0bd5-44b1-86fa-94cc139654bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8368205-bf36-429c-a953-5f33cf6e9800",
          "title": "toString",
          "fullFile": "C:\\Github\\testing-project\\test\\toString.test.js",
          "file": "\\test\\toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be '' when input is null",
              "fullTitle": "toString should be '' when input is null",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = null;\nconst result = toString(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to deeply equal ''",
                "estack": "AssertionError: expected 'null' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/toString.test.js:10:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- null\n"
              },
              "uuid": "f5dcfbac-50ad-4b34-96aa-30354c0f7219",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '' when input is  undefined",
              "fullTitle": "toString should be '' when input is  undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = undefined;\nconst result = toString(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to deeply equal ''",
                "estack": "AssertionError: expected 'undefined' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/toString.test.js:16:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- undefined\n"
              },
              "uuid": "5aa5694b-4728-4227-91bb-d674d87e4381",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '-0' when input is -0",
              "fullTitle": "toString should be '-0' when input is -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -0;\nconst result = toString(input);\nexpect(result).to.deep.equal('-0');",
              "err": {},
              "uuid": "b7b5c60f-ff96-488d-91e0-a63b27066423",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '0' when input is 0",
              "fullTitle": "toString should be '0' when input is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nconst result = toString(input);\nexpect(result).to.deep.equal('0');",
              "err": {},
              "uuid": "65e889c6-0e64-4e3c-8e7d-8f7a886fb174",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '1,2,3' when input is [1, 2, 3]",
              "fullTitle": "toString should be '1,2,3' when input is [1, 2, 3]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nconst result = toString(input);\nexpect(result).to.deep.equal('1,2,3');",
              "err": {},
              "uuid": "50e349e1-3b5c-40e6-9c9a-46c7409695f3",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '0.45' when input is 0.45",
              "fullTitle": "toString should be '0.45' when input is 0.45",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0.45;\nconst result = toString(input);\nexpect(result).to.deep.equal('0.45');",
              "err": {},
              "uuid": "7b5af979-3724-43aa-bc36-b70e4ef9d98f",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be min value as a text '5e-324' when value is a constant, min value",
              "fullTitle": "toString should be min value as a text '5e-324' when value is a constant, min value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = toString(value);\nexpect(result).to.deep.equal('5e-324');",
              "err": {},
              "uuid": "3682417b-3b72-4cbf-92f3-7bbefd232b4a",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '3' when value is '3' as a string",
              "fullTitle": "toString should be '3' when value is '3' as a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = toString(value);\nexpect(result).to.deep.equal('3');",
              "err": {},
              "uuid": "1dbb5d37-6ee8-44d1-a4fa-3d98f411e026",
              "parentUUID": "a8368205-bf36-429c-a953-5f33cf6e9800",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7b5c60f-ff96-488d-91e0-a63b27066423",
            "65e889c6-0e64-4e3c-8e7d-8f7a886fb174",
            "50e349e1-3b5c-40e6-9c9a-46c7409695f3",
            "7b5af979-3724-43aa-bc36-b70e4ef9d98f",
            "3682417b-3b72-4cbf-92f3-7bbefd232b4a",
            "1dbb5d37-6ee8-44d1-a4fa-3d98f411e026"
          ],
          "failures": [
            "f5dcfbac-50ad-4b34-96aa-30354c0f7219",
            "5aa5694b-4728-4227-91bb-d674d87e4381"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}