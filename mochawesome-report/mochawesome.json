{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 19,
    "pending": 0,
    "failures": 4,
    "start": "2024-11-24T15:23:59.081Z",
    "end": "2024-11-24T15:23:59.102Z",
    "duration": 21,
    "testsRegistered": 23,
    "passPercent": 82.6086956521739,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a5fa592b-bf90-4c86-b2cf-7c7f9b1ac2c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "93332a85-f95b-4eea-a1dd-337d365f8b5d",
          "title": "test",
          "fullFile": "C:\\Github\\testing-project\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return true;",
              "err": {},
              "uuid": "30086026-75e1-4b7b-b895-21e80b4b354d",
              "parentUUID": "93332a85-f95b-4eea-a1dd-337d365f8b5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30086026-75e1-4b7b-b895-21e80b4b354d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d090c775-e2f8-4c25-b524-1b94947367d4",
          "title": "eq",
          "fullFile": "C:\\Github\\testing-project\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when comparing object to itself",
              "fullTitle": "eq should be true when comparing object to itself",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst result = eq(object, object);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "f7f5c0a1-2841-446d-a833-b5e2850d9313",
              "parentUUID": "d090c775-e2f8-4c25-b524-1b94947367d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when comparing object to other",
              "fullTitle": "eq should be false when comparing object to other",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = { 'a': 1 };\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "abb18211-77de-42d8-a1e8-65cde8dc776b",
              "parentUUID": "d090c775-e2f8-4c25-b524-1b94947367d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when comparing the same value",
              "fullTitle": "eq should be true when comparing the same value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = eq('a', 'a');\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "ec1e5455-b822-4894-b510-d8189c1e078a",
              "parentUUID": "d090c775-e2f8-4c25-b524-1b94947367d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object and other are not same type",
              "fullTitle": "eq should be false when object and other are not same type",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const object = 'a';\nconst other = Object('a');\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {
                "message": "AssertionError: expected true to deeply equal false",
                "estack": "AssertionError: expected true to deeply equal false\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/eq.test.js:29:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "75085bb9-be03-40fb-8906-093630ccf946",
              "parentUUID": "d090c775-e2f8-4c25-b524-1b94947367d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object is something but other is NaN",
              "fullTitle": "eq should be false when object is something but other is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "a564505a-b768-4c99-819a-5f66f89e9a35",
              "parentUUID": "d090c775-e2f8-4c25-b524-1b94947367d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when object and other are NaN",
              "fullTitle": "eq should be true when object and other are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = NaN;\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "f22b1479-6a60-41ee-a72c-9bfc2da52598",
              "parentUUID": "d090c775-e2f8-4c25-b524-1b94947367d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7f5c0a1-2841-446d-a833-b5e2850d9313",
            "abb18211-77de-42d8-a1e8-65cde8dc776b",
            "ec1e5455-b822-4894-b510-d8189c1e078a",
            "a564505a-b768-4c99-819a-5f66f89e9a35",
            "f22b1479-6a60-41ee-a72c-9bfc2da52598"
          ],
          "failures": [
            "75085bb9-be03-40fb-8906-093630ccf946"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bad10e1c-3267-43f9-871b-8ddebd914368",
          "title": "filter",
          "fullFile": "C:\\Github\\testing-project\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter nothing if predicate is true for all",
              "fullTitle": "filter should filter nothing if predicate is true for all",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >0;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "5a64bf2a-f3d2-4753-ad38-cd9d59123e9d",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers greater than 5",
              "fullTitle": "filter should filter numbers greater than 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >5;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([7, 6]);",
              "err": {},
              "uuid": "a489f00c-9d40-4418-b006-6d096b7f4ac0",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no numbers fulfill the predicate",
              "fullTitle": "filter should return an empty array if no numbers fulfill the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >10;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:25:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "b4ea0c25-a025-40dd-8a9f-c8646725fecb",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is empty",
              "fullTitle": "filter should return an empty array when the array is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst predicate = true;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:32:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "ac84a917-0748-4cef-b5df-4871c847a493",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is null or not defined",
              "fullTitle": "filter should return an empty array when the array is null or not defined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const predicate = (value) => value >10;\nconst result_null = filter(null, predicate);\nexpect(result_null).to.deep.equal([]);\nconst result_not_defined = filter(undefined, predicate);\nexpect(result_not_defined).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:38:37)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "4f0392fa-7d19-47b7-a89b-f86d946da2f3",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array as arguments to the predicate",
              "fullTitle": "filter should pass index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value, index, array) => value === array[index];\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "aeebe888-8cbd-4f93-a83a-06624e183d0b",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter objects based on a property value",
              "fullTitle": "filter should filter objects based on a property value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: 'barney', active: true },\n    { user: 'fred',   active: false }\n];\nconst predicate = (user) => user.active;\nconst result = filter(users, predicate);\nexpect(result).to.deep.equal([{ user: 'barney', active: true }]);",
              "err": {},
              "uuid": "28c705c5-54d6-4c6a-b715-b6c985516a38",
              "parentUUID": "bad10e1c-3267-43f9-871b-8ddebd914368",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a64bf2a-f3d2-4753-ad38-cd9d59123e9d",
            "a489f00c-9d40-4418-b006-6d096b7f4ac0",
            "aeebe888-8cbd-4f93-a83a-06624e183d0b",
            "28c705c5-54d6-4c6a-b715-b6c985516a38"
          ],
          "failures": [
            "b4ea0c25-a025-40dd-8a9f-c8646725fecb",
            "ac84a917-0748-4cef-b5df-4871c847a493",
            "4f0392fa-7d19-47b7-a89b-f86d946da2f3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
          "title": "isLength",
          "fullFile": "C:\\Github\\testing-project\\test\\isLength.test.js",
          "file": "\\test\\isLength.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when number is 0",
              "fullTitle": "isLength should be true when number is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 0;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "569509ff-90fd-4995-9fa8-6855c411b58e",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when value is 1",
              "fullTitle": "isLength should be true when value is 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "6a769a3b-cee6-4b5e-aac0-9eba8e7c94e6",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when when value is 3",
              "fullTitle": "isLength should be true when when value is 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 3;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "8a4fa39d-d53d-40a9-82ed-a0cc4a23f15d",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is -1",
              "fullTitle": "isLength should be false when when value is -1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = -1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "6f7efbb7-462e-49aa-a7c0-f9003dc50aeb",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is 4.52",
              "fullTitle": "isLength should be false when when value is 4.52",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 4.52;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "6a709b02-a1f8-4043-a367-e1aa300af1f7",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is not a number",
              "fullTitle": "isLength should be false when value is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "5865ae31-2a52-4adb-a2bd-76937243a3ee",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is infinity",
              "fullTitle": "isLength should be false when value is infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Infinity;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "5fe3daf3-fe42-485f-9d7f-3ebc78623435",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is number as a string",
              "fullTitle": "isLength should be false when value is number as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "cac72daf-e204-4bdd-80e6-5aa42125a67d",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when number is NaN",
              "fullTitle": "isLength should be false when number is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = NaN;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "9864a4cd-8f8c-45e0-8c08-1e5b20405338",
              "parentUUID": "bad9bbd3-b3df-4c41-b6d2-e589eb9e391b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "569509ff-90fd-4995-9fa8-6855c411b58e",
            "6a769a3b-cee6-4b5e-aac0-9eba8e7c94e6",
            "8a4fa39d-d53d-40a9-82ed-a0cc4a23f15d",
            "6f7efbb7-462e-49aa-a7c0-f9003dc50aeb",
            "6a709b02-a1f8-4043-a367-e1aa300af1f7",
            "5865ae31-2a52-4adb-a2bd-76937243a3ee",
            "5fe3daf3-fe42-485f-9d7f-3ebc78623435",
            "cac72daf-e204-4bdd-80e6-5aa42125a67d",
            "9864a4cd-8f8c-45e0-8c08-1e5b20405338"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}