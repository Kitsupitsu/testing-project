{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 5,
    "pending": 0,
    "failures": 3,
    "start": "2024-11-24T14:50:31.915Z",
    "end": "2024-11-24T14:50:31.927Z",
    "duration": 12,
    "testsRegistered": 8,
    "passPercent": 62.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ac31cb71-1798-4de6-b4c7-d9b0cbe70d08",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bed61c71-d51c-4bee-b336-fbbf49989252",
          "title": "test",
          "fullFile": "C:\\Github\\testing-project\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return true;",
              "err": {},
              "uuid": "25eddab5-7a37-4f24-81d0-9afa3329fee8",
              "parentUUID": "bed61c71-d51c-4bee-b336-fbbf49989252",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25eddab5-7a37-4f24-81d0-9afa3329fee8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
          "title": "filter",
          "fullFile": "C:\\Github\\testing-project\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter nothing if predicate is true for all",
              "fullTitle": "filter should filter nothing if predicate is true for all",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >0;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "cbcc69e7-22c8-4dda-8dd5-0224305a17de",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers greater than 5",
              "fullTitle": "filter should filter numbers greater than 5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >5;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([7, 6]);",
              "err": {},
              "uuid": "02415864-9453-4139-99a6-da4c48ca2162",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no numbers fulfill the predicate",
              "fullTitle": "filter should return an empty array if no numbers fulfill the predicate",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >10;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:25:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "a5195b19-8578-47ac-b0f2-80321ae7f0f5",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is empty",
              "fullTitle": "filter should return an empty array when the array is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst predicate = true;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:32:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "55e077c4-8b76-471e-8050-733499822024",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is null or not defined",
              "fullTitle": "filter should return an empty array when the array is null or not defined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const predicate = (value) => value >10;\nconst result_null = filter(null, predicate);\nexpect(result_null).to.deep.equal([]);\nconst result_not_defined = filter(undefined, predicate);\nexpect(result_not_defined).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:38:37)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "55245d06-9812-4525-b25e-55ecb0f44550",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array as arguments to the predicate",
              "fullTitle": "filter should pass index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value, index, array) => value === array[index];\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "38b1fa36-a8d2-4845-adef-a42d5911b796",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter objects based on a property value",
              "fullTitle": "filter should filter objects based on a property value",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: 'barney', active: true },\n    { user: 'fred',   active: false }\n];\nconst predicate = (user) => user.active;\nconst result = filter(users, predicate);\nexpect(result).to.deep.equal([{ user: 'barney', active: true }]);",
              "err": {},
              "uuid": "a28f2ed3-4ee1-463a-af5e-ca428fbc2fa9",
              "parentUUID": "2ff1978d-0164-429b-b66f-f0b5ba1a493e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbcc69e7-22c8-4dda-8dd5-0224305a17de",
            "02415864-9453-4139-99a6-da4c48ca2162",
            "38b1fa36-a8d2-4845-adef-a42d5911b796",
            "a28f2ed3-4ee1-463a-af5e-ca428fbc2fa9"
          ],
          "failures": [
            "a5195b19-8578-47ac-b0f2-80321ae7f0f5",
            "55e077c4-8b76-471e-8050-733499822024",
            "55245d06-9812-4525-b25e-55ecb0f44550"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}