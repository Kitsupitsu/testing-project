{
  "stats": {
    "suites": 5,
    "tests": 31,
    "passes": 25,
    "pending": 0,
    "failures": 6,
    "start": "2024-11-24T16:28:55.947Z",
    "end": "2024-11-24T16:28:55.967Z",
    "duration": 20,
    "testsRegistered": 31,
    "passPercent": 80.64516129032258,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2498a64a-e59d-4e6e-ab5d-80aeab7b4d55",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a62570a5-96e4-44bc-89ca-520c6594a77a",
          "title": "test",
          "fullFile": "C:\\Github\\testing-project\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return true;",
              "err": {},
              "uuid": "366783dd-2372-4a0e-adda-488d0cecbb55",
              "parentUUID": "a62570a5-96e4-44bc-89ca-520c6594a77a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "366783dd-2372-4a0e-adda-488d0cecbb55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
          "title": "eq",
          "fullFile": "C:\\Github\\testing-project\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when comparing object to itself",
              "fullTitle": "eq should be true when comparing object to itself",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst result = eq(object, object);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "e740092d-edde-4d86-8a10-625a6c60789e",
              "parentUUID": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when comparing object to other",
              "fullTitle": "eq should be false when comparing object to other",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = { 'a': 1 };\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "f9acca86-02e2-435e-8f94-3ba23761a143",
              "parentUUID": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when comparing the same value",
              "fullTitle": "eq should be true when comparing the same value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = eq('a', 'a');\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "1a6facc3-0afa-4a18-8842-7e3f2de3d55d",
              "parentUUID": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object and other are not same type",
              "fullTitle": "eq should be false when object and other are not same type",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const object = 'a';\nconst other = Object('a');\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {
                "message": "AssertionError: expected true to deeply equal false",
                "estack": "AssertionError: expected true to deeply equal false\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/eq.test.js:29:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "26329548-f75a-4962-b358-185454cd17a3",
              "parentUUID": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object is something but other is NaN",
              "fullTitle": "eq should be false when object is something but other is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "d7ba33e5-a736-4662-b939-08cb345a6fa6",
              "parentUUID": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when object and other are NaN",
              "fullTitle": "eq should be true when object and other are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = NaN;\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "c5a7df2e-15b7-49bd-a748-05d6bb1378f1",
              "parentUUID": "9f02be6f-1046-4a6f-a105-89976dbad8ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e740092d-edde-4d86-8a10-625a6c60789e",
            "f9acca86-02e2-435e-8f94-3ba23761a143",
            "1a6facc3-0afa-4a18-8842-7e3f2de3d55d",
            "d7ba33e5-a736-4662-b939-08cb345a6fa6",
            "c5a7df2e-15b7-49bd-a748-05d6bb1378f1"
          ],
          "failures": [
            "26329548-f75a-4962-b358-185454cd17a3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
          "title": "filter",
          "fullFile": "C:\\Github\\testing-project\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter nothing if predicate is true for all",
              "fullTitle": "filter should filter nothing if predicate is true for all",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >0;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "14e72561-2040-422d-aa88-595b7eecfd08",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers greater than 5",
              "fullTitle": "filter should filter numbers greater than 5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >5;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([7, 6]);",
              "err": {},
              "uuid": "b0ed2aa5-9e37-4283-a2eb-870a10e830f7",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no numbers fulfill the predicate",
              "fullTitle": "filter should return an empty array if no numbers fulfill the predicate",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >10;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:25:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "c617e7a8-694a-4fcf-8ee5-e42517b189e9",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is empty",
              "fullTitle": "filter should return an empty array when the array is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst predicate = true;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:32:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "06de7ab3-6bca-47ae-bbe2-5cefc556d542",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is null or not defined",
              "fullTitle": "filter should return an empty array when the array is null or not defined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const predicate = (value) => value >10;\nconst result_null = filter(null, predicate);\nexpect(result_null).to.deep.equal([]);\nconst result_not_defined = filter(undefined, predicate);\nexpect(result_not_defined).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:38:37)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "235868ba-9b4b-4f8e-929a-aee80bee58ca",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array as arguments to the predicate",
              "fullTitle": "filter should pass index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value, index, array) => value === array[index];\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "7c5c451e-7fae-4827-bfc4-8808760d3983",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter objects based on a property value",
              "fullTitle": "filter should filter objects based on a property value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: 'barney', active: true },\n    { user: 'fred',   active: false }\n];\nconst predicate = (user) => user.active;\nconst result = filter(users, predicate);\nexpect(result).to.deep.equal([{ user: 'barney', active: true }]);",
              "err": {},
              "uuid": "353cd2fc-fa33-4513-8530-5470480220d6",
              "parentUUID": "c9a5f7cd-e313-4585-bb64-6b3f62822e39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14e72561-2040-422d-aa88-595b7eecfd08",
            "b0ed2aa5-9e37-4283-a2eb-870a10e830f7",
            "7c5c451e-7fae-4827-bfc4-8808760d3983",
            "353cd2fc-fa33-4513-8530-5470480220d6"
          ],
          "failures": [
            "c617e7a8-694a-4fcf-8ee5-e42517b189e9",
            "06de7ab3-6bca-47ae-bbe2-5cefc556d542",
            "235868ba-9b4b-4f8e-929a-aee80bee58ca"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
          "title": "isLength",
          "fullFile": "C:\\Github\\testing-project\\test\\isLength.test.js",
          "file": "\\test\\isLength.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when number is 0",
              "fullTitle": "isLength should be true when number is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 0;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "6d0ad019-44b6-4d1a-ab9f-41265e8da6ba",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when value is 1",
              "fullTitle": "isLength should be true when value is 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "3eb4a74f-e9bf-41a0-b821-5e6d37175aa3",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when when value is 3",
              "fullTitle": "isLength should be true when when value is 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 3;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "ad5ded9e-9086-41da-816c-74df9a526d0b",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is -1",
              "fullTitle": "isLength should be false when when value is -1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = -1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "79235ade-c145-4e04-9f2a-eee752354a72",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is 4.52",
              "fullTitle": "isLength should be false when when value is 4.52",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 4.52;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "e1f482d4-174d-4bdb-a4df-f6ed486c102b",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is not a number",
              "fullTitle": "isLength should be false when value is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "a5645d94-1ef6-4bba-bd26-05e33fa05a67",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is infinity",
              "fullTitle": "isLength should be false when value is infinity",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Infinity;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "b94bfb1f-043d-4b3b-bbbf-2b7657f6bbde",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is number as a string",
              "fullTitle": "isLength should be false when value is number as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "2efed519-3a61-4bc3-9437-bd1d6f0a83dc",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when number is NaN",
              "fullTitle": "isLength should be false when number is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = NaN;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "1bfe9521-e88d-448c-ad69-4e8d9f4d1116",
              "parentUUID": "470fcb1b-9e26-4e3f-86d9-1df56c3275b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d0ad019-44b6-4d1a-ab9f-41265e8da6ba",
            "3eb4a74f-e9bf-41a0-b821-5e6d37175aa3",
            "ad5ded9e-9086-41da-816c-74df9a526d0b",
            "79235ade-c145-4e04-9f2a-eee752354a72",
            "e1f482d4-174d-4bdb-a4df-f6ed486c102b",
            "a5645d94-1ef6-4bba-bd26-05e33fa05a67",
            "b94bfb1f-043d-4b3b-bbbf-2b7657f6bbde",
            "2efed519-3a61-4bc3-9437-bd1d6f0a83dc",
            "1bfe9521-e88d-448c-ad69-4e8d9f4d1116"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47f0edba-6117-4198-a146-0d38b049abee",
          "title": "toString",
          "fullFile": "C:\\Github\\testing-project\\test\\toString.test.js",
          "file": "\\test\\toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be '' when input is null",
              "fullTitle": "toString should be '' when input is null",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = null;\nconst result = toString(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to deeply equal ''",
                "estack": "AssertionError: expected 'null' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/toString.test.js:10:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- null\n"
              },
              "uuid": "26f020ba-9b91-4696-8263-8dcaa6cdeb5a",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '' when input is  undefined",
              "fullTitle": "toString should be '' when input is  undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = undefined;\nconst result = toString(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to deeply equal ''",
                "estack": "AssertionError: expected 'undefined' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/toString.test.js:16:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- undefined\n"
              },
              "uuid": "2672dcb1-1c9f-446d-bad5-35c503bebd98",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '-0' when input is -0",
              "fullTitle": "toString should be '-0' when input is -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -0;\nconst result = toString(input);\nexpect(result).to.deep.equal('-0');",
              "err": {},
              "uuid": "255e45a0-8390-4558-9207-a1dfb8fb63f6",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '0' when input is 0",
              "fullTitle": "toString should be '0' when input is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nconst result = toString(input);\nexpect(result).to.deep.equal('0');",
              "err": {},
              "uuid": "6f2cc7ef-2c43-40d6-b871-fcc7556e5612",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '1,2,3' when input is [1, 2, 3]",
              "fullTitle": "toString should be '1,2,3' when input is [1, 2, 3]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nconst result = toString(input);\nexpect(result).to.deep.equal('1,2,3');",
              "err": {},
              "uuid": "fbc50524-ee7e-4dad-b086-0fdb1eb6138d",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '0.45' when input is 0.45",
              "fullTitle": "toString should be '0.45' when input is 0.45",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0.45;\nconst result = toString(input);\nexpect(result).to.deep.equal('0.45');",
              "err": {},
              "uuid": "3e1227ba-3d3d-4ba7-b39d-b87663ce603b",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be min value as a text '5e-324' when value is a constant, min value",
              "fullTitle": "toString should be min value as a text '5e-324' when value is a constant, min value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = toString(value);\nexpect(result).to.deep.equal('5e-324');",
              "err": {},
              "uuid": "373c35b7-70e1-4c29-9297-eab854cf69b9",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '3' when value is '3' as a string",
              "fullTitle": "toString should be '3' when value is '3' as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = toString(value);\nexpect(result).to.deep.equal('3');",
              "err": {},
              "uuid": "3f794cfd-fb8a-452d-bb73-bf4c4e4c8811",
              "parentUUID": "47f0edba-6117-4198-a146-0d38b049abee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "255e45a0-8390-4558-9207-a1dfb8fb63f6",
            "6f2cc7ef-2c43-40d6-b871-fcc7556e5612",
            "fbc50524-ee7e-4dad-b086-0fdb1eb6138d",
            "3e1227ba-3d3d-4ba7-b39d-b87663ce603b",
            "373c35b7-70e1-4c29-9297-eab854cf69b9",
            "3f794cfd-fb8a-452d-bb73-bf4c4e4c8811"
          ],
          "failures": [
            "26f020ba-9b91-4696-8263-8dcaa6cdeb5a",
            "2672dcb1-1c9f-446d-bad5-35c503bebd98"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}