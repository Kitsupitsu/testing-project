{
  "stats": {
    "suites": 5,
    "tests": 32,
    "passes": 26,
    "pending": 0,
    "failures": 6,
    "start": "2024-11-24T16:01:55.272Z",
    "end": "2024-11-24T16:01:55.294Z",
    "duration": 22,
    "testsRegistered": 32,
    "passPercent": 81.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "86a98ea4-4dfa-4a8e-a900-3a585f86ef27",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0f4a37e1-0d87-477c-b113-ea36d7ad9bd4",
          "title": "test",
          "fullFile": "C:\\Github\\testing-project\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "test should pass",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return true;",
              "err": {},
              "uuid": "be0fac2b-6de5-4c6f-9e98-b1e83a59819d",
              "parentUUID": "0f4a37e1-0d87-477c-b113-ea36d7ad9bd4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be0fac2b-6de5-4c6f-9e98-b1e83a59819d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d608141b-01a2-4401-8790-17e83e314cbd",
          "title": "eq",
          "fullFile": "C:\\Github\\testing-project\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when comparing object to itself",
              "fullTitle": "eq should be true when comparing object to itself",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst result = eq(object, object);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "3d747d39-a791-4b2e-ab78-19e1d6f79284",
              "parentUUID": "d608141b-01a2-4401-8790-17e83e314cbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when comparing object to other",
              "fullTitle": "eq should be false when comparing object to other",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = { 'a': 1 };\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "c4e4e77b-93ea-4f23-a31a-6a0d509a5b50",
              "parentUUID": "d608141b-01a2-4401-8790-17e83e314cbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when comparing the same value",
              "fullTitle": "eq should be true when comparing the same value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = eq('a', 'a');\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "91f2ad46-2d1c-484f-9483-1b027422cb72",
              "parentUUID": "d608141b-01a2-4401-8790-17e83e314cbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object and other are not same type",
              "fullTitle": "eq should be false when object and other are not same type",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const object = 'a';\nconst other = Object('a');\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {
                "message": "AssertionError: expected true to deeply equal false",
                "estack": "AssertionError: expected true to deeply equal false\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/eq.test.js:29:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "f162ba84-7a16-40b9-977b-3c7c6fea8ac1",
              "parentUUID": "d608141b-01a2-4401-8790-17e83e314cbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object is something but other is NaN",
              "fullTitle": "eq should be false when object is something but other is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "6820299b-a36f-4fdd-9aee-5c0743dec9ea",
              "parentUUID": "d608141b-01a2-4401-8790-17e83e314cbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when object and other are NaN",
              "fullTitle": "eq should be true when object and other are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = NaN;\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "589ddf58-034d-45c2-aaca-16ed5e2a987e",
              "parentUUID": "d608141b-01a2-4401-8790-17e83e314cbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d747d39-a791-4b2e-ab78-19e1d6f79284",
            "c4e4e77b-93ea-4f23-a31a-6a0d509a5b50",
            "91f2ad46-2d1c-484f-9483-1b027422cb72",
            "6820299b-a36f-4fdd-9aee-5c0743dec9ea",
            "589ddf58-034d-45c2-aaca-16ed5e2a987e"
          ],
          "failures": [
            "f162ba84-7a16-40b9-977b-3c7c6fea8ac1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
          "title": "filter",
          "fullFile": "C:\\Github\\testing-project\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter nothing if predicate is true for all",
              "fullTitle": "filter should filter nothing if predicate is true for all",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >0;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "d59941a0-4e9c-441e-b420-f13086e55edc",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers greater than 5",
              "fullTitle": "filter should filter numbers greater than 5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >5;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([7, 6]);",
              "err": {},
              "uuid": "676f8fab-4f02-4b25-b1c3-6b29edff1ab0",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no numbers fulfill the predicate",
              "fullTitle": "filter should return an empty array if no numbers fulfill the predicate",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >10;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:25:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "cdd74740-bea6-4a7b-a958-b9de505890cd",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is empty",
              "fullTitle": "filter should return an empty array when the array is empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst predicate = true;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:32:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "9de2bb0b-582a-4abf-a3ec-e01e837b82e1",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is null or not defined",
              "fullTitle": "filter should return an empty array when the array is null or not defined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const predicate = (value) => value >10;\nconst result_null = filter(null, predicate);\nexpect(result_null).to.deep.equal([]);\nconst result_not_defined = filter(undefined, predicate);\nexpect(result_not_defined).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:38:37)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "e4447dc9-72d4-4682-b7ea-19c3fb2f4d90",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array as arguments to the predicate",
              "fullTitle": "filter should pass index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value, index, array) => value === array[index];\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "0e6be2af-21f7-444e-9015-c5b1ffe81d8e",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter objects based on a property value",
              "fullTitle": "filter should filter objects based on a property value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: 'barney', active: true },\n    { user: 'fred',   active: false }\n];\nconst predicate = (user) => user.active;\nconst result = filter(users, predicate);\nexpect(result).to.deep.equal([{ user: 'barney', active: true }]);",
              "err": {},
              "uuid": "a50727c2-9270-40d9-93c9-06f75d0e2180",
              "parentUUID": "f3aa8a00-8aed-4fe9-8a05-b03ed90c17d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d59941a0-4e9c-441e-b420-f13086e55edc",
            "676f8fab-4f02-4b25-b1c3-6b29edff1ab0",
            "0e6be2af-21f7-444e-9015-c5b1ffe81d8e",
            "a50727c2-9270-40d9-93c9-06f75d0e2180"
          ],
          "failures": [
            "cdd74740-bea6-4a7b-a958-b9de505890cd",
            "9de2bb0b-582a-4abf-a3ec-e01e837b82e1",
            "e4447dc9-72d4-4682-b7ea-19c3fb2f4d90"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "489143b1-349b-477a-a1d2-96601007960b",
          "title": "isLength",
          "fullFile": "C:\\Github\\testing-project\\test\\isLength.test.js",
          "file": "\\test\\isLength.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when number is 0",
              "fullTitle": "isLength should be true when number is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 0;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "b6d01015-edb2-4fbf-9ad9-5c0b11da57b7",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when value is 1",
              "fullTitle": "isLength should be true when value is 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "41232bcd-5ec4-4268-9214-5d174aed4764",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when when value is 3",
              "fullTitle": "isLength should be true when when value is 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 3;\nconst result = isLength(value);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "b4d0329b-a2c2-40f1-99d7-4b8a523c6354",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is -1",
              "fullTitle": "isLength should be false when when value is -1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = -1;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "85eb6cbc-088a-45b2-a29f-157d2921ddbd",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when when value is 4.52",
              "fullTitle": "isLength should be false when when value is 4.52",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = 4.52;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "9f0921c3-0653-4104-9365-45f9b5a42d67",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is not a number",
              "fullTitle": "isLength should be false when value is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "68d7b895-1ed6-46bf-91da-c3ebdea54e58",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is infinity",
              "fullTitle": "isLength should be false when value is infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Infinity;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "94a79425-fc2c-482d-a5fc-8b43145c00b1",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is number as a string",
              "fullTitle": "isLength should be false when value is number as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "7e9c63ba-b0a3-4cf4-877a-dbde9e7c00ee",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when number is NaN",
              "fullTitle": "isLength should be false when number is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = NaN;\nconst result = isLength(value);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "097f6c42-ea35-4006-8764-06cc62af4ad1",
              "parentUUID": "489143b1-349b-477a-a1d2-96601007960b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6d01015-edb2-4fbf-9ad9-5c0b11da57b7",
            "41232bcd-5ec4-4268-9214-5d174aed4764",
            "b4d0329b-a2c2-40f1-99d7-4b8a523c6354",
            "85eb6cbc-088a-45b2-a29f-157d2921ddbd",
            "9f0921c3-0653-4104-9365-45f9b5a42d67",
            "68d7b895-1ed6-46bf-91da-c3ebdea54e58",
            "94a79425-fc2c-482d-a5fc-8b43145c00b1",
            "7e9c63ba-b0a3-4cf4-877a-dbde9e7c00ee",
            "097f6c42-ea35-4006-8764-06cc62af4ad1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
          "title": "toString",
          "fullFile": "C:\\Github\\testing-project\\test\\toString.test.js",
          "file": "\\test\\toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be '' when input is null",
              "fullTitle": "toString should be '' when input is null",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = null;\nconst result = toString(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to deeply equal ''",
                "estack": "AssertionError: expected 'null' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/toString.test.js:10:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- null\n"
              },
              "uuid": "b656aa54-4f5e-44c2-bcb2-0b9b50c58673",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '' when input is  undefined",
              "fullTitle": "toString should be '' when input is  undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = undefined;\nconst result = toString(input);\nexpect(result).to.deep.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to deeply equal ''",
                "estack": "AssertionError: expected 'undefined' to deeply equal ''\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/toString.test.js:16:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- undefined\n"
              },
              "uuid": "395f95a4-8a7c-4ac6-9c77-1c4e52859d38",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '-0' when input is -0",
              "fullTitle": "toString should be '-0' when input is -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -0;\nconst result = toString(input);\nexpect(result).to.deep.equal('-0');",
              "err": {},
              "uuid": "496c7e80-3563-4050-80f9-82ea8525f7a0",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '0' when input is 0",
              "fullTitle": "toString should be '0' when input is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nconst result = toString(input);\nexpect(result).to.deep.equal('0');",
              "err": {},
              "uuid": "bc5d007a-7d6a-4af0-a97a-3306eb4ad6e1",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '1,2,3' when input is [1, 2, 3]",
              "fullTitle": "toString should be '1,2,3' when input is [1, 2, 3]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nconst result = toString(input);\nexpect(result).to.deep.equal('1,2,3');",
              "err": {},
              "uuid": "5b8cc940-333a-4906-b03b-84032b60f59e",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '0.45' when input is 0.45",
              "fullTitle": "toString should be '0.45' when input is 0.45",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0.45;\nconst result = toString(input);\nexpect(result).to.deep.equal('0.45');",
              "err": {},
              "uuid": "f3870e8e-63c0-4914-b123-9676281038e5",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is not a number",
              "fullTitle": "toString should be false when value is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Number.MIN_VALUE;\nconst result = toString(value);\nexpect(result).to.deep.equal('5e-324');",
              "err": {},
              "uuid": "b8a64be7-ed1c-46e7-a4bf-ef34aee036bc",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when value is infinity",
              "fullTitle": "toString should be false when value is infinity",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = Infinity;\nconst result = toString(value);\nexpect(result).to.deep.equal('Infinity');",
              "err": {},
              "uuid": "75299855-193f-4ee8-8ae2-734e600bbd4a",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be '3' when value is '3' as a string",
              "fullTitle": "toString should be '3' when value is '3' as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const value = '3';\nconst result = toString(value);\nexpect(result).to.deep.equal('3');",
              "err": {},
              "uuid": "7565af2d-16d5-4cec-ba7c-c2aae709c6ff",
              "parentUUID": "70471c8a-da01-4abd-b5a5-33ec2be0a89f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "496c7e80-3563-4050-80f9-82ea8525f7a0",
            "bc5d007a-7d6a-4af0-a97a-3306eb4ad6e1",
            "5b8cc940-333a-4906-b03b-84032b60f59e",
            "f3870e8e-63c0-4914-b123-9676281038e5",
            "b8a64be7-ed1c-46e7-a4bf-ef34aee036bc",
            "75299855-193f-4ee8-8ae2-734e600bbd4a",
            "7565af2d-16d5-4cec-ba7c-c2aae709c6ff"
          ],
          "failures": [
            "b656aa54-4f5e-44c2-bcb2-0b9b50c58673",
            "395f95a4-8a7c-4ac6-9c77-1c4e52859d38"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}