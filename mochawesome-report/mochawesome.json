{
  "stats": {
    "suites": 3,
    "tests": 14,
    "passes": 10,
    "pending": 0,
    "failures": 4,
    "start": "2024-11-24T15:13:22.520Z",
    "end": "2024-11-24T15:13:22.538Z",
    "duration": 18,
    "testsRegistered": 14,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8aed1073-bd54-4dc5-b8a8-232a7e62ed2f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1b50ad0a-3803-41b6-8cf2-5b37a8004adb",
          "title": "test",
          "fullFile": "C:\\Github\\testing-project\\test\\add.test.js",
          "file": "\\test\\add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "test should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return true;",
              "err": {},
              "uuid": "edde8506-1d94-427e-9ef2-a6fd05318955",
              "parentUUID": "1b50ad0a-3803-41b6-8cf2-5b37a8004adb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "edde8506-1d94-427e-9ef2-a6fd05318955"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1892b25c-9524-4646-be95-27025138d657",
          "title": "eq",
          "fullFile": "C:\\Github\\testing-project\\test\\eq.test.js",
          "file": "\\test\\eq.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be true when comparing object to itself",
              "fullTitle": "eq should be true when comparing object to itself",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst result = eq(object, object);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "22cb62af-a745-47dc-8aa1-1aef05946bfe",
              "parentUUID": "1892b25c-9524-4646-be95-27025138d657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when comparing object to other",
              "fullTitle": "eq should be false when comparing object to other",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = { 'a': 1 };\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "cd00046a-d336-4635-8ab8-989718b2526e",
              "parentUUID": "1892b25c-9524-4646-be95-27025138d657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when comparing the same value",
              "fullTitle": "eq should be true when comparing the same value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = eq('a', 'a');\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "8d2eaf52-d5ad-4f8e-ac25-e2ad74c41ea4",
              "parentUUID": "1892b25c-9524-4646-be95-27025138d657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object and other are not same type",
              "fullTitle": "eq should be false when object and other are not same type",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const object = 'a';\nconst other = Object('a');\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {
                "message": "AssertionError: expected true to deeply equal false",
                "estack": "AssertionError: expected true to deeply equal false\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/eq.test.js:29:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "98ec015b-0c70-481d-9f07-b8b30f54b095",
              "parentUUID": "1892b25c-9524-4646-be95-27025138d657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be false when object is something but other is NaN",
              "fullTitle": "eq should be false when object is something but other is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1 };\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(false);",
              "err": {},
              "uuid": "7d758e15-eec4-49c3-837f-690f5d856a51",
              "parentUUID": "1892b25c-9524-4646-be95-27025138d657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be true when object and other are NaN",
              "fullTitle": "eq should be true when object and other are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = NaN;\nconst other = NaN;\nconst result = eq(object, other);\nexpect(result).to.deep.equal(true);",
              "err": {},
              "uuid": "687d88ba-98bd-4a5b-a771-e3d8d63c415a",
              "parentUUID": "1892b25c-9524-4646-be95-27025138d657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22cb62af-a745-47dc-8aa1-1aef05946bfe",
            "cd00046a-d336-4635-8ab8-989718b2526e",
            "8d2eaf52-d5ad-4f8e-ac25-e2ad74c41ea4",
            "7d758e15-eec4-49c3-837f-690f5d856a51",
            "687d88ba-98bd-4a5b-a771-e3d8d63c415a"
          ],
          "failures": [
            "98ec015b-0c70-481d-9f07-b8b30f54b095"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
          "title": "filter",
          "fullFile": "C:\\Github\\testing-project\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter nothing if predicate is true for all",
              "fullTitle": "filter should filter nothing if predicate is true for all",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >0;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "53bf0a22-e411-4a56-b9bb-90ae909c9985",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter numbers greater than 5",
              "fullTitle": "filter should filter numbers greater than 5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >5;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([7, 6]);",
              "err": {},
              "uuid": "a76e3194-ed86-4a2b-a20a-2fed4f9c110b",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no numbers fulfill the predicate",
              "fullTitle": "filter should return an empty array if no numbers fulfill the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value) => value >10;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:25:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "997547c7-db69-4600-a812-53f18aa1d286",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is empty",
              "fullTitle": "filter should return an empty array when the array is empty",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = [];\nconst predicate = true;\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:32:32)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "4de75f4d-227f-430b-97c1-dd7a37f6367a",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when the array is null or not defined",
              "fullTitle": "filter should return an empty array when the array is null or not defined",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const predicate = (value) => value >10;\nconst result_null = filter(null, predicate);\nexpect(result_null).to.deep.equal([]);\nconst result_not_defined = filter(undefined, predicate);\nexpect(result_not_defined).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Github/testing-project/test/filter.test.js:38:37)\n    at process.processImmediate (node:internal/timers:483:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "00ef8b78-2e31-4857-a595-f797807d2c56",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array as arguments to the predicate",
              "fullTitle": "filter should pass index and array as arguments to the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 3, 7, 4, 6, 5];\nconst predicate = (value, index, array) => value === array[index];\nconst result = filter(array, predicate);\nexpect(result).to.deep.equal([1, 3, 7, 4, 6, 5]);",
              "err": {},
              "uuid": "ebee197b-23cf-49b8-863e-a5f29dc541bf",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter objects based on a property value",
              "fullTitle": "filter should filter objects based on a property value",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: 'barney', active: true },\n    { user: 'fred',   active: false }\n];\nconst predicate = (user) => user.active;\nconst result = filter(users, predicate);\nexpect(result).to.deep.equal([{ user: 'barney', active: true }]);",
              "err": {},
              "uuid": "b52b4d7d-bc9e-4d36-8b1b-95064d2b5ae9",
              "parentUUID": "08b562f3-eec7-4ebd-b42d-a173a9542cb4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53bf0a22-e411-4a56-b9bb-90ae909c9985",
            "a76e3194-ed86-4a2b-a20a-2fed4f9c110b",
            "ebee197b-23cf-49b8-863e-a5f29dc541bf",
            "b52b4d7d-bc9e-4d36-8b1b-95064d2b5ae9"
          ],
          "failures": [
            "997547c7-db69-4600-a812-53f18aa1d286",
            "4de75f4d-227f-430b-97c1-dd7a37f6367a",
            "00ef8b78-2e31-4857-a595-f797807d2c56"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}